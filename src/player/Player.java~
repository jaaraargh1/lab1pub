package player;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

import item.*;
import location.*;

public class Player {
	private String name;
	private Location currentPosition;
	private ArrayList<Item> inventory;
	private ArrayList<Item> currentlyWearing;

	private int healthPoints;

	private boolean litTorch;

	public Player(String name, Location currentPosition, Scanner keyboard) {
		this.name = name;
		this.currentPosition = currentPosition;
		this.healthPoints = 100;
		inventory = new ArrayList<Item>();
		currentlyWearing = new ArrayList<Item>();
		// TODO: Komplettering: Här bör ni inte skapa en ny
		// scanner. Ifall ni behöver flera scanners i ert projekt,
		// skicka den ni redan har skapat som en parameter istället.
		this.litTorch = false;

	}

	/*
	 * checks if the torch is lit and returns t/f
	 */
	public boolean isLitTorch() {
		return litTorch;
	}

	/*
	 * 
	 * turns the torch on and lights up rooms.
	 */
	public void setTorch() {

		this.litTorch = true;
		System.out.println("din torch brinner nu herpderp.");
	}

	/*
	 * 
	 * equips a wearble item
	 */
	public void setWearingItem(Item item) {
		currentlyWearing.add(item);
	}
	/*
	 * 
	 * syso on what the player is currently wearing such as boots, hat, armor etc.
	 */

	public void printCurrentlyWearing() {

		if (currentlyWearing != null) {
			System.out.println("Du bär följande: ");

			for (Item item : currentlyWearing)
				item.printItemInfo();
		} else {
			System.out.println("Du bär inget, varför går du runt naken?");
		}
	}

	/*
	 * 
	 * 
	 * adds an item u have found.
	 */
	public void addFoundItem(Item item) {

		inventory.add(item);
	}

	/*
	 * 
	 * checks ur inventory for wearables.
	 */
	public boolean checkInventoryForWearable(String command1) {
		for (Item item : inventory) {
			if (command1.equals(String.valueOf(item)) && (item instanceof WearableItem)) {
				return true;
			}

		}
		return false;

	}

	/*
	 * 
	 * checks inventory if u have an object.
	 */
	public boolean checkInventory(String command1) {
		for (Item item : inventory) {
			if (command1.equals(String.valueOf(item))) {
				return true;
			}

		}
		return false;

	}

	/*
	 * 
	 * 
	 * equips an item of ur wearables.
	 */
	public void equipItem(String command) {

		Iterator<Item> itemListIterator = inventory.iterator();

		while (itemListIterator.hasNext()) {

			Item i = itemListIterator.next();
			if (i.getName().equals(command)) {

				System.out.println("tar nu upp på dig " + (command));
				currentlyWearing.add(i);
				itemListIterator.remove();

			}
		}
	}

	/*
	 * 
	 * 
	 * deletes items from ur inventroy
	 */
	public void deleteItemInventory(String command1) {

		Iterator<Item> itemListIterator = inventory.iterator();

		while (itemListIterator.hasNext()) {

			Item i = itemListIterator.next();
			if (i.getName().equals(command1)) {

				itemListIterator.remove();
			}
		}
	}
	/*
	 * 
	 * 
	 * sets HP bonus for wearables.
	 */

	// TODO: Komplettering: Denna funktionalitet hör snarare hemma i
	// putOn( .. ) i item-klassen

	/*
	 * 
	 * 
	 * returns current healthspoints.
	 */
	public int getHealthPoints() {

		return this.healthPoints;
	}

	public void setHealthPoints(int hp) {

		this.healthPoints = healthPoints + (hp);

	}

	/*
	 * 
	 * prints ur inventory.
	 */
	public void printInventory() {
		if (inventory != null) {
			System.out.println("players inventory");

			for (Item item : inventory) {
				item.printItemInfo();
			}
		}

		else {
			System.out.println("Du har inget i ditt inventory");
		}
	}

	// returns the inventory.
	public ArrayList<Item> getInventory() {
		return this.inventory;
	}

	// calls a function in location that returns an item and delets it from the
	// location.
	public void addItem(String command1) {

		this.inventory.add(getLocation().removeItem(command1));
	}

	// gets player name
	public String getName() {

		return this.name;

	}

	public void setName(String name) {

		this.name = name;

	}

	public void setLocation(Location currentPosition) {

		this.currentPosition = currentPosition;

	}

	public Location getLocation() {
		return this.currentPosition;
	}
	/*
	 * 
	 * do command for lots of different functions, movement, directions, take
	 * commands etc. directs most of players functions in-game.
	 */

	// TODO: Komplettering: Ni behöver inte skicka in player som en
	// parameter i denna. Ni har ju redan åtkomst till spelar-objektet
	// genom att använda "this".

	// TODO: Komplettering: doCommand i player bör inte kolla efter
	// kommandon som rör andra klasser. Den bör istället
	// 'vidarebefodra' kommandot till de klasser som kan vara
	// intresserade av den. Ifall vi, som det ser ut nu, skulle lägga
	// till ett tool så skulle vi få lägga till ännu en if-sats i
	// spelarens doCommand. Skulle vi lägga till flera tools så skulle
	// det snabbt bli ohållbart och vår doCommand skulle bli
	// jättelång. Låt istället klasserna själva kolla på kommandot och
	// avgöra om de skall göra något.
	public void doCommand(String command, Scanner keyboard) {
		String command1;
		if (command.equals("help")) {
			System.out.println("Du kan röra dig igenom att skriva North,East,West,South.\n fråga om "
					+ "vart man kan gå igenom att skriva 'directions', 'look'. har'u en torch så kan du använda 'light', 'ukulele'."
					+ "Finns även ett kommando för 'use'.");

		}
		if (command.equals("north") || (command.equals("west") || command.equals("east")) || command.equals("south"))
			;
		getLocation().move(command, this);

		if (command.equals("directions")) {

			getLocation().doCommand(command, this);

		}
		if (command.equals("look")) {
			printCurrentlyWearing();
			this.getLocation().presentItems();
			this.getLocation().printDescription();

		}
		if (command.equals("take")) {
			System.out.println("What do you want to take?");
			command1 = keyboard.nextLine();
			if (this.getLocation().getListOfAllItems().isEmpty()) {
				System.out.println("Finns inget att hämta här");
			} else {
				if (this.getLocation().checkItems(command1) == true) {

					this.addItem(command1);

				} else
					System.out.println("Itemet finns ej här.");
			}
		}

		if (command.equals("items")) {

			printInventory();
		}

		if (command.equals("wear")) {
			System.out.println("Vad vill du ta på dig herpderp? Notera att du bara kan bära en hatt"
					+ "allt annat är för fairies, UwU ");
			command1 = keyboard.nextLine();
			for (Item item : inventory) {

				if (checkInventory(command1) == true) {
					item.doCommand(command1, this);

				}
			}
			this.equipItem(command1);

		}

		if (command.equals("use"))

		{
			System.out.println("What item do you want to use?");
			command1 = keyboard.nextLine();

			for (Item item : inventory) {
				if (checkInventory(command1) == true) {
					item.doCommand(command, this);
				}
			}
		}
	}

}
